//--------------------------------------------->
            Understanding Performance
//--------------------------------------------->

Quiz Review:

    A processor executes a stored program

    A stored program is a sequence of instructions

    Each instruction has operators and operands

    Each instruction is a binary pattern

    The binary pattern of each instruction is directly 
    interpreted and executed by Digital Logic (hardware, electronics)

//--------------------------------------------->

Response Time:
    How long it takes to do a takes

Throughput: 
    Amount of work done per unit Time

* Changing response time or throughout affects the other (often)

//--------------------------------------------->
            Relative Performance
//--------------------------------------------->

Performance = 1/Execution Time
-"X is n times faster than Y"
    Performance_x/Performance_y
    = Execution time_y/Execution Time_x = n

Example: Time taken to run a program
    - 10s on processor A, 15s on processor B
    - Execution Time_b/Execution Time_a = 
        15s / 10s = 1.5
    So, processor A is 1.5 times faster than processor B

How to measure execution time?
    Elapsed time  --------------------------------->  |System Performance|
        * Total response time, including all aspects
            Processing, I/O, OS overhead, idle time

    CPU time --------------------------------------> |Processor Performance for user|
        * Time spent processing a given job
            - Discounts I/O time, other jobs' shares
        * Comprises user CPU time and system CPU time

    * measure how many processor cycles spent for tasks

Different applications are sentitive to different aspects of Performance
    In real systems, performance is a complex combination of throughput and response time
        -ex. maximum throughput with worst-case response time
    Key is to define metrics and identity bottlenecks that limit performance
    (like my Ryzen 3 3100 with my 1080 ti)

//--------------------------------------------->
                    Clocks
//--------------------------------------------->
    Fixed heartbeat (on, off, on, off)
    Can be slower or faster

Clock period:
    Duration of clock cycle (on--- until next on)
    ___[---___]---___---___
       *      *      *   <- update states (on each rise)
CLock Freq (rate): cycles per second

CPU Time = CPUT Clock Cycles x Clock Cycle Time

        CPU Clock Cycles
=      -----------------
          Clock Rate

Performance improved by 
    - Reducing number of clock cycles
    - increasing clock rate
    - hardware designer must often trade off clock rates against cycle count

    You can keep increasing clock rate... up to a point. 
        (overclocking, increases performance up to a point)

CPU time example:
    Computer A: 2GHz clock, 10s cpu time
    designing for computer B:
        Aim for 6s CPU time
        Can do faster clock, but causes 1.2 x clock cycles

    How fast much compuer B clock be?

    ClockRate_B = clock cycles_B / CPU time_B = (1.2 x clock cycles_A) / 6s

    Clock Cycles_A = CPU Time_A x Clock Rate_A = 10s x 2GHz = 20 x 10^9

    Clock Rate_B = (1.2 x 20 x 10^)9 / 6s

Instruction Count and CPI
    Clock Cycles = instruction count x cycles per instruction
        CPU time = instruction count x CPI x Clock Cycle Time

            Instruction Count x CPI
        =   -----------------------
                  Clock Rate
    
    Instruction Count for a program
        Determined by program, ISA, and compiler
    
    Average Cycles per instruction
        Determined by CPU hardware
        If different instruction have different CPI
            - Average CPI affected by instruction mix



